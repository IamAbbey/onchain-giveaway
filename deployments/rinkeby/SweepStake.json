{
  "address": "0x72566D35E3e3D05B0852c359654babF1c3E0d277",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "entrant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "NewEntrantJoinedSweepStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "createdBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "NewSweepStakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "SweepStakeTransferToWinnerSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "SweepStakeWinnersPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "SweepStakeWinnersRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "checkIfTokenIsSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maximumNoOfWinners",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_startDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createSweepStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAllowedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSweepStakes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "maximumNoOfWinners",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "numberOfEntrants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "entrants",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "winners",
              "type": "address[]"
            }
          ],
          "internalType": "struct SweepStake.SingleSweepStake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allowedTokenindex",
          "type": "uint256"
        }
      ],
      "name": "getAllowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entrantAddress",
          "type": "address"
        }
      ],
      "name": "getEntrantSweepStakeIndexMapping",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakerAddress",
          "type": "address"
        }
      ],
      "name": "getStakerSweepStakesIndexes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getSweepStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "maximumNoOfWinners",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "numberOfEntrants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "entrants",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "winners",
              "type": "address[]"
            }
          ],
          "internalType": "struct SweepStake.SingleSweepStake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "initiateSelectionOfWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sweepStakesIndex",
          "type": "uint256"
        }
      ],
      "name": "joinAsEntrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sweepStakeIndex",
          "type": "uint256"
        }
      ],
      "name": "setSingleSweepStakeToActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23f635decce435cf5093c2f8feedf99ba8aea7736be10c905ad7fb557a1c4981",
  "receipt": {
    "to": null,
    "from": "0x85ed830dc28B79BbffeDE9C95B74B0C696A94b02",
    "contractAddress": "0x72566D35E3e3D05B0852c359654babF1c3E0d277",
    "transactionIndex": 18,
    "gasUsed": "3830096",
    "logsBloom": "0x
    "blockHash": "0x1c47a7f081120ef60ca2489f649b94622c96ff235edfc188942981c9b1a93ae2",
    "transactionHash": "0x23f635decce435cf5093c2f8feedf99ba8aea7736be10c905ad7fb557a1c4981",
    "logs": [],
    "blockNumber": 10750195,
    "cumulativeGasUsed": "8071933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "3355",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000"
  ],
  "numDeployments": 2,
  "solcInputHash": "04a59edeb39bf9b244773dc0368f2d04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"NewEntrantJoinedSweepStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"NewSweepStakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"SweepStakeTransferToWinnerSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"SweepStakeWinnersPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"SweepStakeWinnersRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkIfTokenIsSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maximumNoOfWinners\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createSweepStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSweepStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maximumNoOfWinners\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfEntrants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"entrants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"internalType\":\"struct SweepStake.SingleSweepStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedTokenindex\",\"type\":\"uint256\"}],\"name\":\"getAllowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entrantAddress\",\"type\":\"address\"}],\"name\":\"getEntrantSweepStakeIndexMapping\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"}],\"name\":\"getStakerSweepStakesIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"getSweepStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maximumNoOfWinners\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfEntrants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"entrants\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"internalType\":\"struct SweepStake.SingleSweepStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"initiateSelectionOfWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepStakesIndex\",\"type\":\"uint256\"}],\"name\":\"joinAsEntrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sweepStakeIndex\",\"type\":\"uint256\"}],\"name\":\"setSingleSweepStakeToActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SweepStake.sol\":\"SweepStake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/SweepStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract SweepStake is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    struct SingleSweepStake {\\n        uint32 maximumNoOfWinners;\\n        uint256 numberOfEntrants;\\n        uint256 startDateTime;\\n        uint256 endDateTime;\\n        uint256 amount;\\n        address token;\\n        string title;\\n        bool isActive;\\n        address[] entrants;\\n        address[] winners;\\n    }\\n\\n    // SweepStake Variables\\n    mapping(uint256 => uint256) private requestIdToSweepStakerList;\\n    mapping(address => uint256[]) private stakerSweepStakeIndexMapping; // mapping staker's address -> index of sweepStakes\\n    mapping(address => uint256[]) private entrantSweepStakeIndexMapping; // mapping entrant's address -> index of sweepStakes\\n    // mapping entrants address -> index of sweepStakes -> boolean indication entrance\\n    // (this prevents looping through entrantSweepStakeIndexMapping)\\n    mapping(address => mapping(uint256 => bool))\\n        private entrantsSweepStakeMapping;\\n    // mapping(address => address) public tokenPriceFeedMapping;\\n\\n    address[] private s_allowedTokens; // array of allowed tokens\\n    SingleSweepStake[] private s_sweepStakes; // list of all created sweep stakes\\n    //address[] private s_unique_stakers; // list of all stakers\\n    address private immutable _owner;\\n\\n    /* Events */\\n    event NewSweepStakeAdded(\\n        address indexed createdBy,\\n        uint256 indexed sweepStakeIndex\\n    );\\n    event NewEntrantJoinedSweepStake(\\n        address indexed entrant,\\n        uint256 indexed sweepStakeIndex\\n    );\\n    event SweepStakeWinnersRequested(\\n        uint256 indexed requestId,\\n        uint256 indexed sweepStakeIndex\\n    );\\n    event SweepStakeTransferToWinnerSuccess(\\n        address indexed winnerAddress,\\n        uint256 indexed amount,\\n        uint256 indexed sweepStakeIndex\\n    );\\n    event SweepStakeWinnersPicked(\\n        uint256 indexed amount,\\n        uint256 indexed sweepStakeIndex\\n    );\\n\\n    /* State variables */\\n    // Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        _owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function joinAsEntrant(uint256 sweepStakesIndex) public {\\n        require(\\n            !(sweepStakesIndex >= s_sweepStakes.length),\\n            \\\"SweepStake: invalid index\\\"\\n        );\\n        SingleSweepStake memory selectedSingleSweepStake = s_sweepStakes[\\n            sweepStakesIndex\\n        ];\\n\\n        bool hasAlreadyJoinedStake = entrantsSweepStakeMapping[msg.sender][\\n            sweepStakesIndex\\n        ];\\n\\n        require(!hasAlreadyJoinedStake, \\\"SweepStake: already joined\\\");\\n\\n        require(\\n            !(block.timestamp <= selectedSingleSweepStake.startDateTime),\\n            \\\"SweepStake: has not started\\\"\\n        );\\n\\n        require(\\n            !(block.timestamp >= selectedSingleSweepStake.endDateTime),\\n            \\\"SweepStake: has ended\\\"\\n        );\\n        require(selectedSingleSweepStake.isActive, \\\"SweepStake: not active\\\");\\n\\n        s_sweepStakes[sweepStakesIndex].entrants.push(msg.sender);\\n        entrantsSweepStakeMapping[msg.sender][sweepStakesIndex] = true;\\n        entrantSweepStakeIndexMapping[msg.sender].push(sweepStakesIndex);\\n        emit NewEntrantJoinedSweepStake(msg.sender, sweepStakesIndex);\\n    }\\n\\n    function createSweepStake(\\n        uint32 _maximumNoOfWinners,\\n        uint256 _startDateTime,\\n        uint256 _endDateTime,\\n        uint256 _amount,\\n        string memory _title,\\n        address _token\\n    ) public {\\n        require(!(_amount <= 0), \\\"SweepStake: amount too small\\\");\\n\\n        require(\\n            checkIfTokenIsSupported(_token),\\n            \\\"SweepStake: token not supported\\\"\\n        );\\n        require(\\n            !(_startDateTime >= _endDateTime),\\n            \\\"SweepStake: end dateTime is lower than start dateTime\\\"\\n        );\\n\\n        require(\\n            !(block.timestamp >= _startDateTime),\\n            \\\"SweepStake: start dateTime is lower than current block dateTime\\\"\\n        );\\n        require(\\n            !(_maximumNoOfWinners <= 0),\\n            \\\"SweepStake: maximum number of winners less than one\\\"\\n        );\\n\\n        // transfer specified token funds from staker wallet to contract\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n\\n        // only add the address as part of stakers if they have not staked before\\n        stakerSweepStakeIndexMapping[msg.sender].push(s_sweepStakes.length);\\n        emit NewSweepStakeAdded(msg.sender, s_sweepStakes.length);\\n        s_sweepStakes.push(\\n            SingleSweepStake({\\n                maximumNoOfWinners: _maximumNoOfWinners,\\n                startDateTime: _startDateTime,\\n                endDateTime: _endDateTime,\\n                amount: _amount,\\n                token: _token,\\n                title: _title,\\n                numberOfEntrants: 0,\\n                isActive: true,\\n                entrants: new address[](0),\\n                winners: new address[](0)\\n            })\\n        );\\n    }\\n\\n    function checkIfTokenIsSupported(address _token)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool tokenExists = false;\\n        for (\\n            uint256 tokenIndex = 0;\\n            tokenIndex < s_allowedTokens.length;\\n            tokenIndex++\\n        ) {\\n            if (s_allowedTokens[tokenIndex] == _token) {\\n                tokenExists = true;\\n                break;\\n            }\\n        }\\n        return tokenExists;\\n    }\\n\\n    function addAllowedTokens(address _token) public onlyOwner {\\n        s_allowedTokens.push(_token);\\n    }\\n\\n    function initiateSelectionOfWinners(uint256 _sweepStakeIndex)\\n        public\\n        onlyOwner\\n    {\\n        SingleSweepStake memory selectedSingleSweepStake = s_sweepStakes[\\n            _sweepStakeIndex\\n        ];\\n\\n        require(\\n            !(block.timestamp <= selectedSingleSweepStake.startDateTime),\\n            \\\"SweepStake: has not started\\\"\\n        );\\n        require(\\n            selectedSingleSweepStake.endDateTime <= block.timestamp,\\n            \\\"SweepStake: has not ended\\\"\\n        );\\n        require(selectedSingleSweepStake.isActive, \\\"SweepStake: not active\\\");\\n\\n        s_sweepStakes[_sweepStakeIndex].isActive = false;\\n\\n        uint256 requestId;\\n\\n        if (\\n            selectedSingleSweepStake.maximumNoOfWinners <\\n            selectedSingleSweepStake.entrants.length\\n        ) {\\n            requestId = i_vrfCoordinator.requestRandomWords(\\n                i_gasLane,\\n                i_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callbackGasLimit,\\n                selectedSingleSweepStake.maximumNoOfWinners\\n            );\\n        } else {\\n            requestId = i_vrfCoordinator.requestRandomWords(\\n                i_gasLane,\\n                i_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callbackGasLimit,\\n                uint32(selectedSingleSweepStake.entrants.length)\\n            );\\n        }\\n        requestIdToSweepStakerList[requestId] = _sweepStakeIndex;\\n        emit SweepStakeWinnersRequested(requestId, _sweepStakeIndex);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        uint256 resultCount;\\n        for (\\n            uint256 _sweepStakeIndex = 0;\\n            _sweepStakeIndex < s_sweepStakes.length;\\n            _sweepStakeIndex++\\n        ) {\\n            SingleSweepStake memory selectedSingleSweepStake = s_sweepStakes[\\n                _sweepStakeIndex\\n            ];\\n            bool isActive = selectedSingleSweepStake.isActive;\\n            bool timePassed = selectedSingleSweepStake.endDateTime <\\n                block.timestamp;\\n            if (isActive && timePassed) {\\n                resultCount++;\\n            }\\n        }\\n        uint256[] memory listOfSweepStakesThatNeedsAttention = new uint256[](\\n            resultCount\\n        );\\n        uint256 j;\\n        for (\\n            uint256 _sweepStakeIndex = 0;\\n            _sweepStakeIndex < s_sweepStakes.length;\\n            _sweepStakeIndex++\\n        ) {\\n            SingleSweepStake memory selectedSingleSweepStake = s_sweepStakes[\\n                _sweepStakeIndex\\n            ];\\n            bool isActive = selectedSingleSweepStake.isActive;\\n            bool timePassed = selectedSingleSweepStake.endDateTime <\\n                block.timestamp;\\n            if (isActive && timePassed) {\\n                listOfSweepStakesThatNeedsAttention[j] = _sweepStakeIndex;\\n                j++;\\n            }\\n        }\\n        upkeepNeeded = listOfSweepStakesThatNeedsAttention.length > 0;\\n        return (upkeepNeeded, abi.encode(listOfSweepStakesThatNeedsAttention)); // can we comment this out?\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n\\n        uint256[] memory listOfSweepStakesThatNeedsAttention;\\n\\n        listOfSweepStakesThatNeedsAttention = abi.decode(\\n            performData,\\n            (uint256[])\\n        );\\n\\n        for (\\n            uint256 index = 0;\\n            index < listOfSweepStakesThatNeedsAttention.length;\\n            index++\\n        ) {\\n            initiateSelectionOfWinners(\\n                listOfSweepStakesThatNeedsAttention[index]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls to send select winners and send money to the random winners.\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256 sweepStakeIndex = requestIdToSweepStakerList[requestId];\\n        SingleSweepStake memory selectedSingleSweepStake = s_sweepStakes[\\n            sweepStakeIndex\\n        ];\\n\\n        address[] memory entrants = selectedSingleSweepStake.entrants;\\n        uint256 dividend;\\n        // uint256 dividend = (selectedSingleSweepStake.amount /\\n        //     selectedSingleSweepStake.maximumNoOfWinners);\\n        if (\\n            selectedSingleSweepStake.maximumNoOfWinners <\\n            selectedSingleSweepStake.entrants.length\\n        ) {\\n            dividend = (selectedSingleSweepStake.amount /\\n                selectedSingleSweepStake.maximumNoOfWinners);\\n            // (10**18);\\n        } else {\\n            dividend = (selectedSingleSweepStake.amount /\\n                selectedSingleSweepStake.entrants.length);\\n            // (10**18);\\n        }\\n\\n        for (\\n            uint256 randomWordsIndex = 0;\\n            randomWordsIndex < randomWords.length;\\n            randomWordsIndex++\\n        ) {\\n            uint256 indexOfWinner = randomWords[randomWordsIndex] %\\n                entrants.length;\\n            // address payable winner = payable(entrants[indexOfWinner]);\\n            address winner = entrants[indexOfWinner];\\n\\n            bool success = IERC20(selectedSingleSweepStake.token).transfer(\\n                winner,\\n                dividend\\n            );\\n\\n            if (success) {\\n                s_sweepStakes[sweepStakeIndex].winners.push(winner);\\n                emit SweepStakeTransferToWinnerSuccess(\\n                    winner,\\n                    dividend,\\n                    sweepStakeIndex\\n                );\\n            }\\n        }\\n\\n        emit SweepStakeWinnersPicked(dividend, sweepStakeIndex);\\n    }\\n\\n    /* Setters and Getters */\\n\\n    function addressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function setSingleSweepStakeToActive(uint256 _sweepStakeIndex)\\n        public\\n        onlyOwner\\n    {\\n        s_sweepStakes[_sweepStakeIndex].isActive = true;\\n    }\\n\\n    function getSweepStake(uint256 _sweepStakeIndex)\\n        public\\n        view\\n        returns (SingleSweepStake memory)\\n    {\\n        return s_sweepStakes[_sweepStakeIndex];\\n    }\\n\\n    function getAllowedTokens(uint256 _allowedTokenindex)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return s_allowedTokens[_allowedTokenindex];\\n    }\\n\\n    function getStakerSweepStakesIndexes(address _stakerAddress)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return stakerSweepStakeIndexMapping[_stakerAddress];\\n    }\\n\\n    function getEntrantSweepStakeIndexMapping(address _entrantAddress)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return entrantSweepStakeIndexMapping[_entrantAddress];\\n    }\\n\\n    function getAllSweepStakes()\\n        public\\n        view\\n        returns (SingleSweepStake[] memory)\\n    {\\n        return s_sweepStakes;\\n    }\\n\\n    function getAllAllowedTokens() public view returns (address[] memory) {\\n        return s_allowedTokens;\\n    }\\n}\\n\",\"keccak256\":\"0xdc6909ffc540560cab2716e6133e94071c3251bee58a65a19052662bba1dc0db\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620047a8380380620047a8833981810160405281019062000038919062000185565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508161010081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508063ffffffff166101208163ffffffff1660e01b815250503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050620002c6565b6000815190506200013a816200025e565b92915050565b600081519050620001518162000278565b92915050565b600081519050620001688162000292565b92915050565b6000815190506200017f81620002ac565b92915050565b60008060008060808587031215620001a257620001a162000259565b5b6000620001b28782880162000129565b9450506020620001c5878288016200016e565b9350506040620001d88782880162000140565b9250506060620001eb8782880162000157565b91505092959194509250565b6000620002048262000215565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b6200026981620001f7565b81146200027557600080fd5b50565b62000283816200020b565b81146200028f57600080fd5b50565b6200029d8162000235565b8114620002a957600080fd5b50565b620002b78162000245565b8114620002c357600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160c01c610100516101205160e01c6144526200035660003960008181610fa901526110c8015260008181610f650152611084015260008181610f8601526110a5015260008181610f29015261104801526000818161035d01528181610aea0152611e7301526000818161043a015261048e01526144526000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638bf4792511610097578063ce0a192711610066578063ce0a1927146102aa578063f318e557146102da578063f6cfb227146102f8578063fd7564fa1461032857610100565b80638bf479251461022257806390b9407b14610240578063af6385e114610270578063b4b64fcb1461028c57610100565b80634585e33b116100d35780634585e33b146101895780635eb51ed3146101a557806363a450d7146101c15780636e04ff0d146101f157610100565b8063171e44ea146101055780631fe543e31461012157806330a618061461013d578063381296cc14610159575b600080fd5b61011f600480360381019061011a9190612ff5565b610344565b005b61013b60048036038101906101369190613188565b610438565b005b610157600480360381019061015291906131e4565b6104f8565b005b610173600480360381019061016e919061312e565b6109d0565b604051610180919061390e565b60405180910390f35b6101a3600480360381019061019e9190613098565b610a18565b005b6101bf60048036038101906101ba919061312e565b610ad1565b005b6101db60048036038101906101d6919061312e565b6111ad565b6040516101e89190613c56565b60405180910390f35b61020b600480360381019061020691906130e5565b611457565b604051610219929190613a33565b60405180910390f35b61022a611af6565b60405161023791906139d4565b60405180910390f35b61025a60048036038101906102559190612ff5565b611dc3565b60405161026791906139f6565b60405180910390f35b61028a6004803603810190610285919061312e565b611e5a565b005b610294611f29565b6040516102a191906139b2565b60405180910390f35b6102c460048036038101906102bf9190612ff5565b611fb7565b6040516102d19190613a18565b60405180910390f35b6102e2612066565b6040516102ef9190613c78565b60405180910390f35b610312600480360381019061030d9190612ff5565b61206e565b60405161031f91906139f6565b60405180910390f35b610342600480360381019061033d919061312e565b612105565b005b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990613bb6565b60405180910390fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ea57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104e1929190613929565b60405180910390fd5b6104f482826126fc565b5050565b6000831161053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053290613bf6565b60405180910390fd5b61054481611fb7565b610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90613b56565b60405180910390fd5b8385106105c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bc90613b96565b60405180910390fd5b844210610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90613af6565b60405180910390fd5b60008663ffffffff1611610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064790613bd6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161068d93929190613952565b602060405180830381600087803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df919061306b565b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060058054905090806001815401808255809150506001900390600052602060002001600090919091909150556005805490503373ffffffffffffffffffffffffffffffffffffffff167f2df60801511c0024e03e64956702a77644456f50c50b771df4aafb405b97d1f760405160405180910390a360056040518061014001604052808863ffffffff168152602001600081526020018781526020018681526020018581526020018373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600115158152602001600067ffffffffffffffff81111561080d5761080c6140db565b5b60405190808252806020026020018201604052801561083b5781602001602082028036833780820191505090505b508152602001600067ffffffffffffffff81111561085c5761085b6140db565b5b60405190808252806020026020018201604052801561088a5781602001602082028036833780820191505090505b5081525090806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006019080519060200190610969929190612c1a565b5060e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160080190805190602001906109a7929190612ca0565b506101208201518160090190805190602001906109c5929190612ca0565b505050505050505050565b6000600482815481106109e6576109e56140ac565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a3260405180602001604052806000815250611457565b50905080610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90613ab6565b60405180910390fd5b60608383810190610a869190613022565b905060005b8151811015610aca57610ab7828281518110610aaa57610aa96140ac565b5b6020026020010151610ad1565b8080610ac290613fa5565b915050610a8b565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5690613bb6565b60405180910390fd5b600060058281548110610b7557610b746140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682018054610c4390613f42565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6f90613f42565b8015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b820191906000526020600020905b815481529060010190602001808311610c9f57829003601f168201915b505050505081526020016007820160009054906101000a900460ff1615151515815260200160088201805480602002602001604051908101604052809291908181526020018280548015610d6557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d1b575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015610df357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610da9575b505050505081525050905080604001514211610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b90613c36565b60405180910390fd5b4281606001511115610e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8290613b16565b60405180910390fd5b8060e00151610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690613ad6565b60405180910390fd5b600060058381548110610ee557610ee46140ac565b5b90600052602060002090600a020160070160006101000a81548160ff021916908315150217905550600081610100015151826000015163ffffffff161015611046577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000087600001516040518663ffffffff1660e01b8152600401610fed959493929190613a63565b602060405180830381600087803b15801561100757600080fd5b505af115801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f919061315b565b9050611163565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876101000151516040518663ffffffff1660e01b815260040161110e959493929190613a63565b602060405180830381600087803b15801561112857600080fd5b505af115801561113c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611160919061315b565b90505b826000808381526020019081526020016000208190555082817ff0d0f916ccdd72ba1a7e83e613a7386a72ea1ee357ab638c458807be9511113c60405160405180910390a3505050565b6111b5612d2a565b600582815481106111c9576111c86140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461129790613f42565b80601f01602080910402602001604051908101604052809291908181526020018280546112c390613f42565b80156113105780601f106112e557610100808354040283529160200191611310565b820191906000526020600020905b8154815290600101906020018083116112f357829003601f168201915b505050505081526020016007820160009054906101000a900460ff16151515158152602001600882018054806020026020016040519081016040528092919081815260200182805480156113b957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161136f575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561144757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113fd575b5050505050815250509050919050565b60006060600080600090505b60058054905081101561175757600060058281548110611486576114856140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461155490613f42565b80601f016020809104026020016040519081016040528092919081815260200182805461158090613f42565b80156115cd5780601f106115a2576101008083540402835291602001916115cd565b820191906000526020600020905b8154815290600101906020018083116115b057829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016008820180548060200260200160405190810160405280929190818152602001828054801561167657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161162c575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561170457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116ba575b505050505081525050905060008160e001519050600042836060015110905081801561172d5750805b1561174157848061173d90613fa5565b9550505b505050808061174f90613fa5565b915050611463565b5060008167ffffffffffffffff811115611774576117736140db565b5b6040519080825280602002602001820160405280156117a25781602001602082028036833780820191505090505b509050600080600090505b600580549050811015611ac1576000600582815481106117d0576117cf6140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461189e90613f42565b80601f01602080910402602001604051908101604052809291908181526020018280546118ca90613f42565b80156119175780601f106118ec57610100808354040283529160200191611917565b820191906000526020600020905b8154815290600101906020018083116118fa57829003601f168201915b505050505081526020016007820160009054906101000a900460ff16151515158152602001600882018054806020026020016040519081016040528092919081815260200182805480156119c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611976575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015611a4e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a04575b505050505081525050905060008160e0015190506000428360600151109050818015611a775750805b15611aab5783868681518110611a9057611a8f6140ac565b5b6020026020010181815250508480611aa790613fa5565b9550505b5050508080611ab990613fa5565b9150506117ad565b50600082511194508482604051602001611adb91906139f6565b60405160208183030381529060405294509450505050915091565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015611dba57838290600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682018054611bf290613f42565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1e90613f42565b8015611c6b5780601f10611c4057610100808354040283529160200191611c6b565b820191906000526020600020905b815481529060010190602001808311611c4e57829003601f168201915b505050505081526020016007820160009054906101000a900460ff1615151515815260200160088201805480602002602001604051908101604052809291908181526020018280548015611d1457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cca575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015611da257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d58575b50505050508152505081526020019060010190611b1a565b50505050905090565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611e4e57602002820191906000526020600020905b815481526020019060010190808311611e3a575b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614611ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edf90613bb6565b60405180910390fd5b600160058281548110611efe57611efd6140ac565b5b90600052602060002090600a020160070160006101000a81548160ff02191690831515021790555050565b60606004805480602002602001604051908101604052809291908181526020018280548015611fad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f63575b5050505050905090565b6000806000905060005b60048054905081101561205c578373ffffffffffffffffffffffffffffffffffffffff1660048281548110611ff957611ff86140ac565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612049576001915061205c565b808061205490613fa5565b915050611fc1565b5080915050919050565b600047905090565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156120f957602002820191906000526020600020905b8154815260200190600101908083116120e5575b50505050509050919050565b600580549050811061214c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214390613b36565b60405180910390fd5b600060058281548110612162576121616140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461223090613f42565b80601f016020809104026020016040519081016040528092919081815260200182805461225c90613f42565b80156122a95780601f1061227e576101008083540402835291602001916122a9565b820191906000526020600020905b81548152906001019060200180831161228c57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016008820180548060200260200160405190810160405280929190818152602001828054801561235257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612308575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156123e057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612396575b50505050508152505090506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff169050801561248e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248590613c16565b60405180910390fd5b816040015142116124d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124cb90613c36565b60405180910390fd5b8160600151421061251a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251190613b76565b60405180910390fd5b8160e0015161255e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255590613ad6565b60405180910390fd5b60058381548110612572576125716140ac565b5b90600052602060002090600a0201600801339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055823373ffffffffffffffffffffffffffffffffffffffff167f2b50157f62bbde562b6ad04cfa754bb0e69fef05deedad028d755ae13c4c5b7660405160405180910390a3505050565b6000806000848152602001908152602001600020549050600060058281548110612729576127286140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820180546127f790613f42565b80601f016020809104026020016040519081016040528092919081815260200182805461282390613f42565b80156128705780601f1061284557610100808354040283529160200191612870565b820191906000526020600020905b81548152906001019060200180831161285357829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016008820180548060200260200160405190810160405280929190818152602001828054801561291957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116128cf575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156129a757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161295d575b505050505081525050905060008161010001519050600082610100015151836000015163ffffffff1610156129f757826000015163ffffffff1683608001516129f09190613e4b565b9050612a10565b826101000151518360800151612a0d9190613e4b565b90505b60005b8551811015612be35760008351878381518110612a3357612a326140ac565b5b6020026020010151612a459190613fee565b90506000848281518110612a5c57612a5b6140ac565b5b6020026020010151905060008660a0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83876040518363ffffffff1660e01b8152600401612aa7929190613989565b602060405180830381600087803b158015612ac157600080fd5b505af1158015612ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af9919061306b565b90508015612bcd5760058881548110612b1557612b146140ac565b5b90600052602060002090600a0201600901829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087858373ffffffffffffffffffffffffffffffffffffffff167f03792c276507f12211f27685eebf0aac2f67084ad01034c28d5fe10754e69d6460405160405180910390a45b5050508080612bdb90613fa5565b915050612a13565b5083817f866eb90c64567bd1a7e32b3c3d7c11949c860c1fb2962995a343015b3e87e6ac60405160405180910390a3505050505050565b828054612c2690613f42565b90600052602060002090601f016020900481019282612c485760008555612c8f565b82601f10612c6157805160ff1916838001178555612c8f565b82800160010185558215612c8f579182015b82811115612c8e578251825591602001919060010190612c73565b5b509050612c9c9190612d9b565b5090565b828054828255906000526020600020908101928215612d19579160200282015b82811115612d185782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612cc0565b5b509050612d269190612d9b565b5090565b604051806101400160405280600063ffffffff16815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160001515815260200160608152602001606081525090565b5b80821115612db4576000816000905550600101612d9c565b5090565b6000612dcb612dc684613cb8565b613c93565b90508083825260208201905082856020860282011115612dee57612ded614114565b5b60005b85811015612e1e5781612e048882612fb6565b845260208401935060208301925050600181019050612df1565b5050509392505050565b6000612e3b612e3684613ce4565b613c93565b905082815260208101848484011115612e5757612e56614119565b5b612e62848285613f00565b509392505050565b6000612e7d612e7884613d15565b613c93565b905082815260208101848484011115612e9957612e98614119565b5b612ea4848285613f00565b509392505050565b600081359050612ebb816143c0565b92915050565b600082601f830112612ed657612ed561410f565b5b8135612ee6848260208601612db8565b91505092915050565b600081519050612efe816143d7565b92915050565b60008083601f840112612f1a57612f1961410f565b5b8235905067ffffffffffffffff811115612f3757612f3661410a565b5b602083019150836001820283011115612f5357612f52614114565b5b9250929050565b600082601f830112612f6f57612f6e61410f565b5b8135612f7f848260208601612e28565b91505092915050565b600082601f830112612f9d57612f9c61410f565b5b8135612fad848260208601612e6a565b91505092915050565b600081359050612fc5816143ee565b92915050565b600081519050612fda816143ee565b92915050565b600081359050612fef81614405565b92915050565b60006020828403121561300b5761300a614123565b5b600061301984828501612eac565b91505092915050565b60006020828403121561303857613037614123565b5b600082013567ffffffffffffffff8111156130565761305561411e565b5b61306284828501612ec1565b91505092915050565b60006020828403121561308157613080614123565b5b600061308f84828501612eef565b91505092915050565b600080602083850312156130af576130ae614123565b5b600083013567ffffffffffffffff8111156130cd576130cc61411e565b5b6130d985828601612f04565b92509250509250929050565b6000602082840312156130fb576130fa614123565b5b600082013567ffffffffffffffff8111156131195761311861411e565b5b61312584828501612f5a565b91505092915050565b60006020828403121561314457613143614123565b5b600061315284828501612fb6565b91505092915050565b60006020828403121561317157613170614123565b5b600061317f84828501612fcb565b91505092915050565b6000806040838503121561319f5761319e614123565b5b60006131ad85828601612fb6565b925050602083013567ffffffffffffffff8111156131ce576131cd61411e565b5b6131da85828601612ec1565b9150509250929050565b60008060008060008060c0878903121561320157613200614123565b5b600061320f89828a01612fe0565b965050602061322089828a01612fb6565b955050604061323189828a01612fb6565b945050606061324289828a01612fb6565b935050608087013567ffffffffffffffff8111156132635761326261411e565b5b61326f89828a01612f88565b92505060a061328089828a01612eac565b9150509295509295509295565b600061329983836132d1565b60208301905092915050565b60006132b183836136e4565b905092915050565b60006132c583836138c3565b60208301905092915050565b6132da81613e7c565b82525050565b6132e981613e7c565b82525050565b60006132fa82613d76565b6133048185613dd4565b935061330f83613d46565b8060005b83811015613340578151613327888261328d565b975061333283613dad565b925050600181019050613313565b5085935050505092915050565b600061335882613d76565b6133628185613de5565b935061336d83613d46565b8060005b8381101561339e578151613385888261328d565b975061339083613dad565b925050600181019050613371565b5085935050505092915050565b60006133b682613d81565b6133c08185613df6565b9350836020820285016133d285613d56565b8060005b8581101561340e57848403895281516133ef85826132a5565b94506133fa83613dba565b925060208a019950506001810190506133d6565b50829750879550505050505092915050565b600061342b82613d8c565b6134358185613e07565b935061344083613d66565b8060005b8381101561347157815161345888826132b9565b975061346383613dc7565b925050600181019050613444565b5085935050505092915050565b61348781613e8e565b82525050565b61349681613e8e565b82525050565b6134a581613e9a565b82525050565b60006134b682613d97565b6134c08185613e18565b93506134d0818560208601613f0f565b6134d981614128565b840191505092915050565b60006134ef82613da2565b6134f98185613e29565b9350613509818560208601613f0f565b61351281614128565b840191505092915050565b600061352a601183613e3a565b915061353582614139565b602082019050919050565b600061354d601683613e3a565b915061355882614162565b602082019050919050565b6000613570603f83613e3a565b915061357b8261418b565b604082019050919050565b6000613593601983613e3a565b915061359e826141da565b602082019050919050565b60006135b6601983613e3a565b91506135c182614203565b602082019050919050565b60006135d9601f83613e3a565b91506135e48261422c565b602082019050919050565b60006135fc601583613e3a565b915061360782614255565b602082019050919050565b600061361f603583613e3a565b915061362a8261427e565b604082019050919050565b6000613642602083613e3a565b915061364d826142cd565b602082019050919050565b6000613665603383613e3a565b9150613670826142f6565b604082019050919050565b6000613688601c83613e3a565b915061369382614345565b602082019050919050565b60006136ab601a83613e3a565b91506136b68261436e565b602082019050919050565b60006136ce601b83613e3a565b91506136d982614397565b602082019050919050565b6000610140830160008301516136fd60008601826138e1565b50602083015161371060208601826138c3565b50604083015161372360408601826138c3565b50606083015161373660608601826138c3565b50608083015161374960808601826138c3565b5060a083015161375c60a08601826132d1565b5060c083015184820360c086015261377482826134e4565b91505060e083015161378960e086018261347e565b506101008301518482036101008601526137a382826132ef565b9150506101208301518482036101208601526137bf82826132ef565b9150508091505092915050565b6000610140830160008301516137e560008601826138e1565b5060208301516137f860208601826138c3565b50604083015161380b60408601826138c3565b50606083015161381e60608601826138c3565b50608083015161383160808601826138c3565b5060a083015161384460a08601826132d1565b5060c083015184820360c086015261385c82826134e4565b91505060e083015161387160e086018261347e565b5061010083015184820361010086015261388b82826132ef565b9150506101208301518482036101208601526138a782826132ef565b9150508091505092915050565b6138bd81613ea4565b82525050565b6138cc81613ed2565b82525050565b6138db81613ed2565b82525050565b6138ea81613edc565b82525050565b6138f981613edc565b82525050565b61390881613eec565b82525050565b600060208201905061392360008301846132e0565b92915050565b600060408201905061393e60008301856132e0565b61394b60208301846132e0565b9392505050565b600060608201905061396760008301866132e0565b61397460208301856132e0565b61398160408301846138d2565b949350505050565b600060408201905061399e60008301856132e0565b6139ab60208301846138d2565b9392505050565b600060208201905081810360008301526139cc818461334d565b905092915050565b600060208201905081810360008301526139ee81846133ab565b905092915050565b60006020820190508181036000830152613a108184613420565b905092915050565b6000602082019050613a2d600083018461348d565b92915050565b6000604082019050613a48600083018561348d565b8181036020830152613a5a81846134ab565b90509392505050565b600060a082019050613a78600083018861349c565b613a8560208301876138ff565b613a9260408301866138b4565b613a9f60608301856138f0565b613aac60808301846138f0565b9695505050505050565b60006020820190508181036000830152613acf8161351d565b9050919050565b60006020820190508181036000830152613aef81613540565b9050919050565b60006020820190508181036000830152613b0f81613563565b9050919050565b60006020820190508181036000830152613b2f81613586565b9050919050565b60006020820190508181036000830152613b4f816135a9565b9050919050565b60006020820190508181036000830152613b6f816135cc565b9050919050565b60006020820190508181036000830152613b8f816135ef565b9050919050565b60006020820190508181036000830152613baf81613612565b9050919050565b60006020820190508181036000830152613bcf81613635565b9050919050565b60006020820190508181036000830152613bef81613658565b9050919050565b60006020820190508181036000830152613c0f8161367b565b9050919050565b60006020820190508181036000830152613c2f8161369e565b9050919050565b60006020820190508181036000830152613c4f816136c1565b9050919050565b60006020820190508181036000830152613c7081846137cc565b905092915050565b6000602082019050613c8d60008301846138d2565b92915050565b6000613c9d613cae565b9050613ca98282613f74565b919050565b6000604051905090565b600067ffffffffffffffff821115613cd357613cd26140db565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613cff57613cfe6140db565b5b613d0882614128565b9050602081019050919050565b600067ffffffffffffffff821115613d3057613d2f6140db565b5b613d3982614128565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613e5682613ed2565b9150613e6183613ed2565b925082613e7157613e7061404e565b5b828204905092915050565b6000613e8782613eb2565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613f2d578082015181840152602081019050613f12565b83811115613f3c576000848401525b50505050565b60006002820490506001821680613f5a57607f821691505b60208210811415613f6e57613f6d61407d565b5b50919050565b613f7d82614128565b810181811067ffffffffffffffff82111715613f9c57613f9b6140db565b5b80604052505050565b6000613fb082613ed2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fe357613fe261401f565b5b600182019050919050565b6000613ff982613ed2565b915061400483613ed2565b9250826140145761401361404e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f55706b656570206e6f74206e6565646564000000000000000000000000000000600082015250565b7f53776565705374616b653a206e6f742061637469766500000000000000000000600082015250565b7f53776565705374616b653a207374617274206461746554696d65206973206c6f60008201527f776572207468616e2063757272656e7420626c6f636b206461746554696d6500602082015250565b7f53776565705374616b653a20686173206e6f7420656e64656400000000000000600082015250565b7f53776565705374616b653a20696e76616c696420696e64657800000000000000600082015250565b7f53776565705374616b653a20746f6b656e206e6f7420737570706f7274656400600082015250565b7f53776565705374616b653a2068617320656e6465640000000000000000000000600082015250565b7f53776565705374616b653a20656e64206461746554696d65206973206c6f776560008201527f72207468616e207374617274206461746554696d650000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53776565705374616b653a206d6178696d756d206e756d626572206f6620776960008201527f6e6e657273206c657373207468616e206f6e6500000000000000000000000000602082015250565b7f53776565705374616b653a20616d6f756e7420746f6f20736d616c6c00000000600082015250565b7f53776565705374616b653a20616c7265616479206a6f696e6564000000000000600082015250565b7f53776565705374616b653a20686173206e6f7420737461727465640000000000600082015250565b6143c981613e7c565b81146143d457600080fd5b50565b6143e081613e8e565b81146143eb57600080fd5b50565b6143f781613ed2565b811461440257600080fd5b50565b61440e81613edc565b811461441957600080fd5b5056fea26469706673582212208d08fbc4c7a4dacae67f77aa0f6c5baf8549d12b1c430b17de5a352f76b0a17f64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638bf4792511610097578063ce0a192711610066578063ce0a1927146102aa578063f318e557146102da578063f6cfb227146102f8578063fd7564fa1461032857610100565b80638bf479251461022257806390b9407b14610240578063af6385e114610270578063b4b64fcb1461028c57610100565b80634585e33b116100d35780634585e33b146101895780635eb51ed3146101a557806363a450d7146101c15780636e04ff0d146101f157610100565b8063171e44ea146101055780631fe543e31461012157806330a618061461013d578063381296cc14610159575b600080fd5b61011f600480360381019061011a9190612ff5565b610344565b005b61013b60048036038101906101369190613188565b610438565b005b610157600480360381019061015291906131e4565b6104f8565b005b610173600480360381019061016e919061312e565b6109d0565b604051610180919061390e565b60405180910390f35b6101a3600480360381019061019e9190613098565b610a18565b005b6101bf60048036038101906101ba919061312e565b610ad1565b005b6101db60048036038101906101d6919061312e565b6111ad565b6040516101e89190613c56565b60405180910390f35b61020b600480360381019061020691906130e5565b611457565b604051610219929190613a33565b60405180910390f35b61022a611af6565b60405161023791906139d4565b60405180910390f35b61025a60048036038101906102559190612ff5565b611dc3565b60405161026791906139f6565b60405180910390f35b61028a6004803603810190610285919061312e565b611e5a565b005b610294611f29565b6040516102a191906139b2565b60405180910390f35b6102c460048036038101906102bf9190612ff5565b611fb7565b6040516102d19190613a18565b60405180910390f35b6102e2612066565b6040516102ef9190613c78565b60405180910390f35b610312600480360381019061030d9190612ff5565b61206e565b60405161031f91906139f6565b60405180910390f35b610342600480360381019061033d919061312e565b612105565b005b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990613bb6565b60405180910390fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ea57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104e1929190613929565b60405180910390fd5b6104f482826126fc565b5050565b6000831161053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053290613bf6565b60405180910390fd5b61054481611fb7565b610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90613b56565b60405180910390fd5b8385106105c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bc90613b96565b60405180910390fd5b844210610607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fe90613af6565b60405180910390fd5b60008663ffffffff1611610650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064790613bd6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161068d93929190613952565b602060405180830381600087803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df919061306b565b50600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060058054905090806001815401808255809150506001900390600052602060002001600090919091909150556005805490503373ffffffffffffffffffffffffffffffffffffffff167f2df60801511c0024e03e64956702a77644456f50c50b771df4aafb405b97d1f760405160405180910390a360056040518061014001604052808863ffffffff168152602001600081526020018781526020018681526020018581526020018373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600115158152602001600067ffffffffffffffff81111561080d5761080c6140db565b5b60405190808252806020026020018201604052801561083b5781602001602082028036833780820191505090505b508152602001600067ffffffffffffffff81111561085c5761085b6140db565b5b60405190808252806020026020018201604052801561088a5781602001602082028036833780820191505090505b5081525090806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006019080519060200190610969929190612c1a565b5060e08201518160070160006101000a81548160ff0219169083151502179055506101008201518160080190805190602001906109a7929190612ca0565b506101208201518160090190805190602001906109c5929190612ca0565b505050505050505050565b6000600482815481106109e6576109e56140ac565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a3260405180602001604052806000815250611457565b50905080610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90613ab6565b60405180910390fd5b60608383810190610a869190613022565b905060005b8151811015610aca57610ab7828281518110610aaa57610aa96140ac565b5b6020026020010151610ad1565b8080610ac290613fa5565b915050610a8b565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5690613bb6565b60405180910390fd5b600060058281548110610b7557610b746140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682018054610c4390613f42565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6f90613f42565b8015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b820191906000526020600020905b815481529060010190602001808311610c9f57829003601f168201915b505050505081526020016007820160009054906101000a900460ff1615151515815260200160088201805480602002602001604051908101604052809291908181526020018280548015610d6557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d1b575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015610df357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610da9575b505050505081525050905080604001514211610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b90613c36565b60405180910390fd5b4281606001511115610e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8290613b16565b60405180910390fd5b8060e00151610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690613ad6565b60405180910390fd5b600060058381548110610ee557610ee46140ac565b5b90600052602060002090600a020160070160006101000a81548160ff021916908315150217905550600081610100015151826000015163ffffffff161015611046577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000087600001516040518663ffffffff1660e01b8152600401610fed959493929190613a63565b602060405180830381600087803b15801561100757600080fd5b505af115801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f919061315b565b9050611163565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876101000151516040518663ffffffff1660e01b815260040161110e959493929190613a63565b602060405180830381600087803b15801561112857600080fd5b505af115801561113c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611160919061315b565b90505b826000808381526020019081526020016000208190555082817ff0d0f916ccdd72ba1a7e83e613a7386a72ea1ee357ab638c458807be9511113c60405160405180910390a3505050565b6111b5612d2a565b600582815481106111c9576111c86140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461129790613f42565b80601f01602080910402602001604051908101604052809291908181526020018280546112c390613f42565b80156113105780601f106112e557610100808354040283529160200191611310565b820191906000526020600020905b8154815290600101906020018083116112f357829003601f168201915b505050505081526020016007820160009054906101000a900460ff16151515158152602001600882018054806020026020016040519081016040528092919081815260200182805480156113b957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161136f575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561144757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113fd575b5050505050815250509050919050565b60006060600080600090505b60058054905081101561175757600060058281548110611486576114856140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461155490613f42565b80601f016020809104026020016040519081016040528092919081815260200182805461158090613f42565b80156115cd5780601f106115a2576101008083540402835291602001916115cd565b820191906000526020600020905b8154815290600101906020018083116115b057829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016008820180548060200260200160405190810160405280929190818152602001828054801561167657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161162c575b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561170457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116ba575b505050505081525050905060008160e001519050600042836060015110905081801561172d5750805b1561174157848061173d90613fa5565b9550505b505050808061174f90613fa5565b915050611463565b5060008167ffffffffffffffff811115611774576117736140db565b5b6040519080825280602002602001820160405280156117a25781602001602082028036833780820191505090505b509050600080600090505b600580549050811015611ac1576000600582815481106117d0576117cf6140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461189e90613f42565b80601f01602080910402602001604051908101604052809291908181526020018280546118ca90613f42565b80156119175780601f106118ec57610100808354040283529160200191611917565b820191906000526020600020905b8154815290600101906020018083116118fa57829003601f168201915b505050505081526020016007820160009054906101000a900460ff16151515158152602001600882018054806020026020016040519081016040528092919081815260200182805480156119c057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611976575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015611a4e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a04575b505050505081525050905060008160e0015190506000428360600151109050818015611a775750805b15611aab5783868681518110611a9057611a8f6140ac565b5b6020026020010181815250508480611aa790613fa5565b9550505b5050508080611ab990613fa5565b9150506117ad565b50600082511194508482604051602001611adb91906139f6565b60405160208183030381529060405294509450505050915091565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015611dba57838290600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682018054611bf290613f42565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1e90613f42565b8015611c6b5780601f10611c4057610100808354040283529160200191611c6b565b820191906000526020600020905b815481529060010190602001808311611c4e57829003601f168201915b505050505081526020016007820160009054906101000a900460ff1615151515815260200160088201805480602002602001604051908101604052809291908181526020018280548015611d1457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cca575b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015611da257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d58575b50505050508152505081526020019060010190611b1a565b50505050905090565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611e4e57602002820191906000526020600020905b815481526020019060010190808311611e3a575b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614611ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edf90613bb6565b60405180910390fd5b600160058281548110611efe57611efd6140ac565b5b90600052602060002090600a020160070160006101000a81548160ff02191690831515021790555050565b60606004805480602002602001604051908101604052809291908181526020018280548015611fad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f63575b5050505050905090565b6000806000905060005b60048054905081101561205c578373ffffffffffffffffffffffffffffffffffffffff1660048281548110611ff957611ff86140ac565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612049576001915061205c565b808061205490613fa5565b915050611fc1565b5080915050919050565b600047905090565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156120f957602002820191906000526020600020905b8154815260200190600101908083116120e5575b50505050509050919050565b600580549050811061214c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214390613b36565b60405180910390fd5b600060058281548110612162576121616140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201805461223090613f42565b80601f016020809104026020016040519081016040528092919081815260200182805461225c90613f42565b80156122a95780601f1061227e576101008083540402835291602001916122a9565b820191906000526020600020905b81548152906001019060200180831161228c57829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016008820180548060200260200160405190810160405280929190818152602001828054801561235257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612308575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156123e057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612396575b50505050508152505090506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff169050801561248e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248590613c16565b60405180910390fd5b816040015142116124d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124cb90613c36565b60405180910390fd5b8160600151421061251a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251190613b76565b60405180910390fd5b8160e0015161255e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255590613ad6565b60405180910390fd5b60058381548110612572576125716140ac565b5b90600052602060002090600a0201600801339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055823373ffffffffffffffffffffffffffffffffffffffff167f2b50157f62bbde562b6ad04cfa754bb0e69fef05deedad028d755ae13c4c5b7660405160405180910390a3505050565b6000806000848152602001908152602001600020549050600060058281548110612729576127286140ac565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820180546127f790613f42565b80601f016020809104026020016040519081016040528092919081815260200182805461282390613f42565b80156128705780601f1061284557610100808354040283529160200191612870565b820191906000526020600020905b81548152906001019060200180831161285357829003601f168201915b505050505081526020016007820160009054906101000a900460ff161515151581526020016008820180548060200260200160405190810160405280929190818152602001828054801561291957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116128cf575b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156129a757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161295d575b505050505081525050905060008161010001519050600082610100015151836000015163ffffffff1610156129f757826000015163ffffffff1683608001516129f09190613e4b565b9050612a10565b826101000151518360800151612a0d9190613e4b565b90505b60005b8551811015612be35760008351878381518110612a3357612a326140ac565b5b6020026020010151612a459190613fee565b90506000848281518110612a5c57612a5b6140ac565b5b6020026020010151905060008660a0015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83876040518363ffffffff1660e01b8152600401612aa7929190613989565b602060405180830381600087803b158015612ac157600080fd5b505af1158015612ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af9919061306b565b90508015612bcd5760058881548110612b1557612b146140ac565b5b90600052602060002090600a0201600901829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087858373ffffffffffffffffffffffffffffffffffffffff167f03792c276507f12211f27685eebf0aac2f67084ad01034c28d5fe10754e69d6460405160405180910390a45b5050508080612bdb90613fa5565b915050612a13565b5083817f866eb90c64567bd1a7e32b3c3d7c11949c860c1fb2962995a343015b3e87e6ac60405160405180910390a3505050505050565b828054612c2690613f42565b90600052602060002090601f016020900481019282612c485760008555612c8f565b82601f10612c6157805160ff1916838001178555612c8f565b82800160010185558215612c8f579182015b82811115612c8e578251825591602001919060010190612c73565b5b509050612c9c9190612d9b565b5090565b828054828255906000526020600020908101928215612d19579160200282015b82811115612d185782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612cc0565b5b509050612d269190612d9b565b5090565b604051806101400160405280600063ffffffff16815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160001515815260200160608152602001606081525090565b5b80821115612db4576000816000905550600101612d9c565b5090565b6000612dcb612dc684613cb8565b613c93565b90508083825260208201905082856020860282011115612dee57612ded614114565b5b60005b85811015612e1e5781612e048882612fb6565b845260208401935060208301925050600181019050612df1565b5050509392505050565b6000612e3b612e3684613ce4565b613c93565b905082815260208101848484011115612e5757612e56614119565b5b612e62848285613f00565b509392505050565b6000612e7d612e7884613d15565b613c93565b905082815260208101848484011115612e9957612e98614119565b5b612ea4848285613f00565b509392505050565b600081359050612ebb816143c0565b92915050565b600082601f830112612ed657612ed561410f565b5b8135612ee6848260208601612db8565b91505092915050565b600081519050612efe816143d7565b92915050565b60008083601f840112612f1a57612f1961410f565b5b8235905067ffffffffffffffff811115612f3757612f3661410a565b5b602083019150836001820283011115612f5357612f52614114565b5b9250929050565b600082601f830112612f6f57612f6e61410f565b5b8135612f7f848260208601612e28565b91505092915050565b600082601f830112612f9d57612f9c61410f565b5b8135612fad848260208601612e6a565b91505092915050565b600081359050612fc5816143ee565b92915050565b600081519050612fda816143ee565b92915050565b600081359050612fef81614405565b92915050565b60006020828403121561300b5761300a614123565b5b600061301984828501612eac565b91505092915050565b60006020828403121561303857613037614123565b5b600082013567ffffffffffffffff8111156130565761305561411e565b5b61306284828501612ec1565b91505092915050565b60006020828403121561308157613080614123565b5b600061308f84828501612eef565b91505092915050565b600080602083850312156130af576130ae614123565b5b600083013567ffffffffffffffff8111156130cd576130cc61411e565b5b6130d985828601612f04565b92509250509250929050565b6000602082840312156130fb576130fa614123565b5b600082013567ffffffffffffffff8111156131195761311861411e565b5b61312584828501612f5a565b91505092915050565b60006020828403121561314457613143614123565b5b600061315284828501612fb6565b91505092915050565b60006020828403121561317157613170614123565b5b600061317f84828501612fcb565b91505092915050565b6000806040838503121561319f5761319e614123565b5b60006131ad85828601612fb6565b925050602083013567ffffffffffffffff8111156131ce576131cd61411e565b5b6131da85828601612ec1565b9150509250929050565b60008060008060008060c0878903121561320157613200614123565b5b600061320f89828a01612fe0565b965050602061322089828a01612fb6565b955050604061323189828a01612fb6565b945050606061324289828a01612fb6565b935050608087013567ffffffffffffffff8111156132635761326261411e565b5b61326f89828a01612f88565b92505060a061328089828a01612eac565b9150509295509295509295565b600061329983836132d1565b60208301905092915050565b60006132b183836136e4565b905092915050565b60006132c583836138c3565b60208301905092915050565b6132da81613e7c565b82525050565b6132e981613e7c565b82525050565b60006132fa82613d76565b6133048185613dd4565b935061330f83613d46565b8060005b83811015613340578151613327888261328d565b975061333283613dad565b925050600181019050613313565b5085935050505092915050565b600061335882613d76565b6133628185613de5565b935061336d83613d46565b8060005b8381101561339e578151613385888261328d565b975061339083613dad565b925050600181019050613371565b5085935050505092915050565b60006133b682613d81565b6133c08185613df6565b9350836020820285016133d285613d56565b8060005b8581101561340e57848403895281516133ef85826132a5565b94506133fa83613dba565b925060208a019950506001810190506133d6565b50829750879550505050505092915050565b600061342b82613d8c565b6134358185613e07565b935061344083613d66565b8060005b8381101561347157815161345888826132b9565b975061346383613dc7565b925050600181019050613444565b5085935050505092915050565b61348781613e8e565b82525050565b61349681613e8e565b82525050565b6134a581613e9a565b82525050565b60006134b682613d97565b6134c08185613e18565b93506134d0818560208601613f0f565b6134d981614128565b840191505092915050565b60006134ef82613da2565b6134f98185613e29565b9350613509818560208601613f0f565b61351281614128565b840191505092915050565b600061352a601183613e3a565b915061353582614139565b602082019050919050565b600061354d601683613e3a565b915061355882614162565b602082019050919050565b6000613570603f83613e3a565b915061357b8261418b565b604082019050919050565b6000613593601983613e3a565b915061359e826141da565b602082019050919050565b60006135b6601983613e3a565b91506135c182614203565b602082019050919050565b60006135d9601f83613e3a565b91506135e48261422c565b602082019050919050565b60006135fc601583613e3a565b915061360782614255565b602082019050919050565b600061361f603583613e3a565b915061362a8261427e565b604082019050919050565b6000613642602083613e3a565b915061364d826142cd565b602082019050919050565b6000613665603383613e3a565b9150613670826142f6565b604082019050919050565b6000613688601c83613e3a565b915061369382614345565b602082019050919050565b60006136ab601a83613e3a565b91506136b68261436e565b602082019050919050565b60006136ce601b83613e3a565b91506136d982614397565b602082019050919050565b6000610140830160008301516136fd60008601826138e1565b50602083015161371060208601826138c3565b50604083015161372360408601826138c3565b50606083015161373660608601826138c3565b50608083015161374960808601826138c3565b5060a083015161375c60a08601826132d1565b5060c083015184820360c086015261377482826134e4565b91505060e083015161378960e086018261347e565b506101008301518482036101008601526137a382826132ef565b9150506101208301518482036101208601526137bf82826132ef565b9150508091505092915050565b6000610140830160008301516137e560008601826138e1565b5060208301516137f860208601826138c3565b50604083015161380b60408601826138c3565b50606083015161381e60608601826138c3565b50608083015161383160808601826138c3565b5060a083015161384460a08601826132d1565b5060c083015184820360c086015261385c82826134e4565b91505060e083015161387160e086018261347e565b5061010083015184820361010086015261388b82826132ef565b9150506101208301518482036101208601526138a782826132ef565b9150508091505092915050565b6138bd81613ea4565b82525050565b6138cc81613ed2565b82525050565b6138db81613ed2565b82525050565b6138ea81613edc565b82525050565b6138f981613edc565b82525050565b61390881613eec565b82525050565b600060208201905061392360008301846132e0565b92915050565b600060408201905061393e60008301856132e0565b61394b60208301846132e0565b9392505050565b600060608201905061396760008301866132e0565b61397460208301856132e0565b61398160408301846138d2565b949350505050565b600060408201905061399e60008301856132e0565b6139ab60208301846138d2565b9392505050565b600060208201905081810360008301526139cc818461334d565b905092915050565b600060208201905081810360008301526139ee81846133ab565b905092915050565b60006020820190508181036000830152613a108184613420565b905092915050565b6000602082019050613a2d600083018461348d565b92915050565b6000604082019050613a48600083018561348d565b8181036020830152613a5a81846134ab565b90509392505050565b600060a082019050613a78600083018861349c565b613a8560208301876138ff565b613a9260408301866138b4565b613a9f60608301856138f0565b613aac60808301846138f0565b9695505050505050565b60006020820190508181036000830152613acf8161351d565b9050919050565b60006020820190508181036000830152613aef81613540565b9050919050565b60006020820190508181036000830152613b0f81613563565b9050919050565b60006020820190508181036000830152613b2f81613586565b9050919050565b60006020820190508181036000830152613b4f816135a9565b9050919050565b60006020820190508181036000830152613b6f816135cc565b9050919050565b60006020820190508181036000830152613b8f816135ef565b9050919050565b60006020820190508181036000830152613baf81613612565b9050919050565b60006020820190508181036000830152613bcf81613635565b9050919050565b60006020820190508181036000830152613bef81613658565b9050919050565b60006020820190508181036000830152613c0f8161367b565b9050919050565b60006020820190508181036000830152613c2f8161369e565b9050919050565b60006020820190508181036000830152613c4f816136c1565b9050919050565b60006020820190508181036000830152613c7081846137cc565b905092915050565b6000602082019050613c8d60008301846138d2565b92915050565b6000613c9d613cae565b9050613ca98282613f74565b919050565b6000604051905090565b600067ffffffffffffffff821115613cd357613cd26140db565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613cff57613cfe6140db565b5b613d0882614128565b9050602081019050919050565b600067ffffffffffffffff821115613d3057613d2f6140db565b5b613d3982614128565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613e5682613ed2565b9150613e6183613ed2565b925082613e7157613e7061404e565b5b828204905092915050565b6000613e8782613eb2565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613f2d578082015181840152602081019050613f12565b83811115613f3c576000848401525b50505050565b60006002820490506001821680613f5a57607f821691505b60208210811415613f6e57613f6d61407d565b5b50919050565b613f7d82614128565b810181811067ffffffffffffffff82111715613f9c57613f9b6140db565b5b80604052505050565b6000613fb082613ed2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fe357613fe261401f565b5b600182019050919050565b6000613ff982613ed2565b915061400483613ed2565b9250826140145761401361404e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f55706b656570206e6f74206e6565646564000000000000000000000000000000600082015250565b7f53776565705374616b653a206e6f742061637469766500000000000000000000600082015250565b7f53776565705374616b653a207374617274206461746554696d65206973206c6f60008201527f776572207468616e2063757272656e7420626c6f636b206461746554696d6500602082015250565b7f53776565705374616b653a20686173206e6f7420656e64656400000000000000600082015250565b7f53776565705374616b653a20696e76616c696420696e64657800000000000000600082015250565b7f53776565705374616b653a20746f6b656e206e6f7420737570706f7274656400600082015250565b7f53776565705374616b653a2068617320656e6465640000000000000000000000600082015250565b7f53776565705374616b653a20656e64206461746554696d65206973206c6f776560008201527f72207468616e207374617274206461746554696d650000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f53776565705374616b653a206d6178696d756d206e756d626572206f6620776960008201527f6e6e657273206c657373207468616e206f6e6500000000000000000000000000602082015250565b7f53776565705374616b653a20616d6f756e7420746f6f20736d616c6c00000000600082015250565b7f53776565705374616b653a20616c7265616479206a6f696e6564000000000000600082015250565b7f53776565705374616b653a20686173206e6f7420737461727465640000000000600082015250565b6143c981613e7c565b81146143d457600080fd5b50565b6143e081613e8e565b81146143eb57600080fd5b50565b6143f781613ed2565b811461440257600080fd5b50565b61440e81613edc565b811461441957600080fd5b5056fea26469706673582212208d08fbc4c7a4dacae67f77aa0f6c5baf8549d12b1c430b17de5a352f76b0a17f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 281,
        "contract": "contracts/SweepStake.sol:SweepStake",
        "label": "requestIdToSweepStakerList",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 286,
        "contract": "contracts/SweepStake.sol:SweepStake",
        "label": "stakerSweepStakeIndexMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 291,
        "contract": "contracts/SweepStake.sol:SweepStake",
        "label": "entrantSweepStakeIndexMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 297,
        "contract": "contracts/SweepStake.sol:SweepStake",
        "label": "entrantsSweepStakeMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 300,
        "contract": "contracts/SweepStake.sol:SweepStake",
        "label": "s_allowedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 304,
        "contract": "contracts/SweepStake.sol:SweepStake",
        "label": "s_sweepStakes",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(SingleSweepStake)277_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SingleSweepStake)277_storage)dyn_storage": {
        "base": "t_struct(SingleSweepStake)277_storage",
        "encoding": "dynamic_array",
        "label": "struct SweepStake.SingleSweepStake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SingleSweepStake)277_storage": {
        "encoding": "inplace",
        "label": "struct SweepStake.SingleSweepStake",
        "members": [
          {
            "astId": 256,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "maximumNoOfWinners",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 258,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "numberOfEntrants",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 260,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "startDateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 262,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "endDateTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 264,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 266,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "token",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 268,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "title",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 270,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "isActive",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 273,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "entrants",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 276,
            "contract": "contracts/SweepStake.sol:SweepStake",
            "label": "winners",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}